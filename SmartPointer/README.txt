1. C++ 引入智能指针的主要目的是为了自动化内存管理，减少手动 new 和 delete 带来的复杂性和错误。智能指针通过 RAII(资源获取即初始化)机制，
在对象生命周期结束时自动释放资源，从而有效防止内存泄漏和资源管理错误。


2. 原生指针
● 内存泄漏(Memory Leak): 如果使用 new 分配了堆内存但忘记在合适的时机调用 delete，就会导致内存泄漏。
● 悬挂指针(Dangling Pointer): 当指针指向的内存已被释放或被其他对象占用后，原生指针却仍然保持不变，后续操作就有可能读写到无效或错误的内存区域。
● 双重释放(Double Free): 如果两个原生指针都指向同一块堆内存，并且都在析构或其他代码中调用了 delete，会发生双重释放错误，导致程序崩溃或出现未定义行为。


3. 智能指针
● 自动销毁: 在智能指针生命周期结束时自动释放资源。
● 引用计数: 共享智能指针能够跟踪引用数量，确保资源在最后一个引用结束时释放。
● 避免内存泄漏: 通过 RAII 机制自动管理资源生命周期。
● 类型安全: 提供更严格的类型检查，减少错误。
● std::unique_ptr: 独占所有权，适合大多数需要动态分配但只有唯一所有者的场景。
● std::shared_ptr: 共享所有权，适合多个对象需要同时使用和管理同一资源的场景。
● std::weak_ptr: 辅助 std::shared_ptr，防止循环引用，并且可用于检测资源是否还存在。
