1. 引用的基本概念
● 引用不是对象: 它本身并不占用额外内存空间，不能像指针那样对引用做算术运算或修改它的指向。
● 引用必须初始化: 一旦创建，就必须绑定到某个已存在的对象上，而且绑定后不可改变。
● 通过引用访问对象: 对引用执行的操作，本质上就是对底层对象执行操作。


2. 左值
◼ 左值(lvalue)是指具有明确存储位置（内存地址）的对象，可以出现在赋值表达式的左侧。左值表示对象的身份，即它们是什么。
◼ 有持久的存储位置, 可以被取地址.
◼ 可以出现在赋值操作符的左边。
◼ 典型例子: 变量名, 返回左值引用的函数调用, 前置自增/自减运算符, 赋值/复合赋值表达式, 解引用表达式。


3. 右值
◼ 右值(rvalue)是指临时的, 不具有持久存储位置的对象, 通常是无法直接取地址的表达式. 右值主要表示对象的值, 而非身份.
◼ 没有持久的存储位置, 不能直接取地址.
◼ 不能出现在赋值操作符的左边.
◼ 典型例子: 字面值, 返回非引用类型的函数调用, 后置自增/自减运算符, 算术/逻辑/比较表达式.


4. 将亡值
◼ 将亡值(xvalue)属于右值的一种。它表示一个即将被销毁、但其资源可以被移动的对象。
◼ 表示资源即将转移。
◼ 通常出现在使用 std::move 后或函数返回右值引用时。
◼ 支持移动语义，允许资源高效转移而无需拷贝。
◼ static_cast<T&&>, 将左值转为将亡值。
