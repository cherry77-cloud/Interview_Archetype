1. 链接是将各种代码和数据片段收集并组合成为一个单一文件的过程, 这个文件可被加载到内存中并执行.
    ● 链接可以执行于编译时, 也就是在源代码被翻译成机器代码时;
    ● 链接也可以执行于加载时, 也就是在程序被加载器加载到内存并执行;
    ● 甚至执行于运行时, 也就是由应用程序来执行.
    ● 链接器在软件开发中扮演着一个关键的角色, 因为它们使得分离编译成为可能.


2. 大多数编译系统提供编译器驱动程序, 它代表用户在需要时调用预处理器, 编译器, 汇编器和链接器.
★ 驱动程序首先运行C预处理器(cpp), 它将C的源程序main.c翻译成一个ASCII码的中间文件 main.i
    -> cpp [other arguments] main.c /tmp/main.i 
★ 接下来, 驱动程序运行C编译器(cc1), 它将 main.i 翻译成一个ASCII汇编语言文件 main.s
    -> cc1 /tmp/main.i -Og [other arguments] -o tmp/main.s 
★ 然后, 驱动程序运行汇编器(as), 它将main.s翻译成一个可重定位目标文件 main.o
    -> as [other arguments] -o /tmp/main.o /tmp/main.s
★ 驱动程序经过相同的过程生成sum.o. 最后, 它运行链接器程序ld, 将 main.o 和 sum.o 以及一些必要的系统目标文件
组合起来, 创建一个可执行目标文件prog.
    -> ld -o prog [system object files and args] /tmp/main.o /tmp/sum.o
    -> ld -static \
      /usr/lib/x86_64-linux-gnu/crt1.o \
      /usr/lib/x86_64-linux-gnu/crti.o \
      /usr/lib/gcc/x86_64-linux-gnu/11/crtbeginT.o \
      hello.o \
      -L/usr/lib/gcc/x86_64-linux-gnu/11 \
      -L/usr/lib/x86_64-linux-gnu \
      -start-group \
      -lgcc \
      -lgcc_eh \
      -lc \
      -end-group \
      /usr/lib/gcc/x86_64-linux-gnu/11/crtend.o \
      /usr/lib/x86_64-linux-gnu/crtn.o
    -> find /usr/lib -name crt1.o
★ 要运行可执行文件prog, 在Linux Shell的命令行上输入它的名字, shell调用操作系统中一个叫做加载器的函数, 它将
可执行文件prog中的代码和数据复制到内存, 然后将控制转移到这个程序的开头.


3. 静态链接
★ 像Linux LD程序这样的静态链接器以一组可重定位目标文件和命令行参数作为输入, 生成一个完全链接的, 可以加载和运行的
可执行目标文件作为输出. 为了构造可执行目标文件, 链接器必须完成两个主要任务.
    ◼ 符号解析: 目标文件定义和引用符号, 每个符号对应一个函数, 一个全局变量或一个静态变量. 符号解析的目的是将每个符号
          引用正好和一个符号定义关联起来.
    ◼ 重定位: 编译器和汇编器生成从地址0开始的代码和数据节. 链接器通过把每个符号定义与一个内存位置关联起来, 从而重定位
          这些节, 然后修改所有对这些符号的引用, 使得它们指向这个内存位置. 链接器使用汇编器产生的重定位条目的详细指令, 
          不加甄别地执行这样的重定位.


4. 目标文件
★ 可重定位目标文件: 包含二进制代码和数据, 其形式可以在编译时与其他可重定位目标文件合并起来, 创建一个可执行目标文件.
★ 可执行目标文件: 包含二进制代码和数据, 其形式可以被直接复制到内存并执行.
★ 共享目标文件: 一种特殊类型的可重定位目标文件, 可以在加载或者运行时被动态地加载进内存并链接.
    ◼ I. 编译器和汇编器生成可重定位目标文件(包括共享目标文件). 链接器生成可执行目标文件.
    ◼ II. 目标文件是按照特定的目标文件格式来组织的, 各个系统的目标文件格式都不相同.
        ● 从贝尔实验室诞生的第一个Unix系统使用的是a.out格式;
        ● Windows使用可移植可执行(Portable Executable, PE)格式;
        ● MacOS-X使用Mach-O格式;
        ● 现代x86-64 Linux和Unix系统使用可执行可链接格式(Executable and Linkable Format, ELF).
