1. 多态概述
多态是指同一个接口（函数或方法）可以有不同的实现方式，具体表现为同一个函数调用在不同对象上可以表现出不同的行为。
    🍔 静态多态: 在编译时确定调用哪个函数，通过函数重载和模板实现。
    🍔 动态多态: 在运行时确定调用哪个函数，通过虚函数和继承实现。


2. 静态多态
静态多态在编译阶段就确定了函数调用的具体实现，编译器通过函数重载和模板机制实现。由于函数的具体调用在编译时就已确定，
因此静态多态的调用效率较高，不涉及运行时的额外开销。
    🍔 函数重载: 同名函数根据参数列表的不同进行区分。
    🍔 运算符重载: 重载运算符以适应自定义类型的操作。
    🍔 模板: 通过模板函数或模板类实现通用代码，适用于不同类型的数据。


3. 动态多态
动态多态在运行阶段决定具体调用哪个函数，实现方式主要依赖于虚函数和继承。通过基类指针或引用调用派生类的重写函数，达到运行时绑定的效果。
动态多态允许程序在运行时根据对象的实际类型执行相应的操作，提高了代码的灵活性和可扩展性。
    🍔 虚函数: 在基类中使用virtual关键字声明函数，允许派生类重写该函数。
    🍔 纯虚函数与抽象类: 使用 = 0 声明纯虚函数，创建抽象类，强制派生类实现特定函数。
    🍔 接口类: 仅包含纯虚函数的抽象类，用于定义接口。
    🍔 虚函数表(vtable): 编译器为每个包含虚函数的类生成的一个表，存储该类及其派生类重写的虚函数的地址。
    🍔 虚指针(vptr): 每个包含虚函数的对象中隐藏的一个指针，指向该类的vtable。通过vptr，程序在运行时根据对象的实际类型，
        通过vtable找到正确的虚函数地址，实现动态多态。
